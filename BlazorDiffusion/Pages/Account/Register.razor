@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using BlazorDiffusion.Data
@using BlazorDiffusion.Identity

@inject UserManager<AppUser> UserManager
@inject IUserStore<AppUser> UserStore
@inject SignInManager<AppUser> SignInManager
@inject ILogger<Register> Logger
@inject IEmailSender EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="mt-8 mx-auto max-w-lg">
    <h1 class="mb-3 @Css.H1">Register</h1>

    <StatusMessage Message="@Message" />
    <div class="mt-3 shadow overflow-hidden sm:rounded-md">
        <div class="px-4 bg-white dark:bg-black sm:p-6">
            <EditForm id="registerForm" Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <h3 class="@Css.H3">Create a new account.</h3>
                <DataAnnotationsValidator />
                <ValidationSummary class="@Css.ValidationSummary" />
                <div class="flex flex-col gap-y-4">
                    <div>
                        <label for="email" class="@Css.InputLabel">Email</label>
                        <div class="mt-1 relative rounded-md shadow-sm">
                            <InputText id="email" type="text" @bind-Value="Input.Email" class="@Css.InputText" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        </div>
                        <ValidationMessage For="() => Input.Email" class="@Css.ValidationMessage" />
                    </div>
                    <div>
                        <label for="password" class="@Css.InputLabel">Password</label>
                        <div class="mt-1 relative rounded-md shadow-sm">
                            <InputText id="password" type="password" @bind-Value="Input.Password" class="@Css.InputText" autocomplete="new-password" aria-required="true" placeholder="password" />
                        </div>
                        <ValidationMessage For="() => Input.Password" class="@Css.ValidationMessage" />
                    </div>
                    <div>
                        <label for="confirm-password">Confirm Password</label>
                        <div class="mt-1 relative rounded-md shadow-sm">
                            <InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="@Css.InputText" autocomplete="new-password" aria-required="true" placeholder="password" />
                        </div>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="@Css.ValidationMessage" />
                    </div>
                    <div>
                        <button id="registerSubmit" type="submit" onclick="setTimeout(() => this.disabled=true,1)" class="@Css.PrimaryButton">Register</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="mt-8">
        <section>
            <h3 class="@Css.H3">Use another service to register.</h3>
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public InputModel Input { get; set; } = default!;

    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "";

    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public class InputModel
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = null!;

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = null!;

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = null!;
    }

    IEnumerable<IdentityError>? identityErrors;
    string? Message => identityErrors is null ? null : "Error: " + string.Join(", ", identityErrors.Select(error => error.Description));

    protected override void OnInitialized()
    {
        Input ??= new();
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            Logger.LogInformation("User created a new account with password.");

            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("/Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { { "userId", userId }, { "code", code }, { "returnUrl", ReturnUrl } });

            await EmailSender.SendEmailAsync(Input.Email, "Confirm your email",
                $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo(
                    "/Account/RegisterConfirmation",
                    new() { ["Email"] = Input.Email, ["ReturnUrl"] = ReturnUrl });
            }
            else
            {
                await SignInManager.SignInAsync(user, isPersistent: false);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }
        else
        {
            identityErrors = result.Errors;
        }
    }

    private AppUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<AppUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(AppUser)}'. " +
                $"Ensure that '{nameof(AppUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<AppUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<AppUser>)UserStore;
    }
}
