@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorDiffusion.Data
@using BlazorDiffusion.Identity

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject UserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set password</PageTitle>

<h3 class="@Css.H3">Set your password</h3>

<div class="max-w-xl">
    <StatusMessage Message="@_message" />

    <p class="text-info">
        You do not have a local username/password for this site. Add a local
        account so you can log in without an external login.
    </p>

    <div class="mt-3 shadow overflow-hidden sm:rounded-md">
        <div class="px-4 bg-white dark:bg-black sm:p-6">
            <EditForm id="set-password-form" Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="@Css.ValidationSummary" />

                <div class="flex flex-col gap-4">
                    <div>
                        <label for="new-password" class="@Css.InputLabel">New password</label>
                        <div class="mt-1 relative rounded-md shadow-sm">
                            <InputText id="new-password" type="password" @bind-Value="Input.NewPassword" class="@Css.InputText" autocomplete="new-password" placeholder="Please enter your new password." />
                        </div>
                        <ValidationMessage For="() => Input.NewPassword" class="@Css.ValidationMessage" />
                    </div>
                    <div>
                        <label for="confirm-password" class="@Css.InputLabel">Confirm password</label>
                        <div class="mt-1 relative rounded-md shadow-sm">
                            <InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="@Css.InputText" autocomplete="new-password" placeholder="Please confirm your new password." />
                        </div>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="@Css.ValidationMessage" />
                    </div>
                    <div>
                        <button type="submit" class="@Css.PrimaryButton">Set password</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? _message;
    private AppUser _user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        _user = await UserAccessor.GetRequiredUserAsync();

        var hasPassword = await UserManager.HasPasswordAsync(_user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("/Account/Manage/ChangePassword");
            return;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(_user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            _message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.");
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
