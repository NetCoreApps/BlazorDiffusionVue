@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity;
@using BlazorDiffusion.Data;
@using BlazorDiffusion.Identity

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject UserAccessor UserAccessor;
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3 class="@Css.H3">Profile</h3>
<StatusMessage />

<div class="max-w-xl">
    <div class="shadow overflow-hidden sm:rounded-md">
        <EditForm id="profile-form" Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post"
                  class="px-4 bg-white dark:bg-black sm:p-6">
            <DataAnnotationsValidator />
            <ValidationSummary class="@Css.ValidationSummary" />

            <div class="flex flex-col gap-y-4">
                <div>
                    <label for="username" class="@Css.InputLabel">Username</label>
                    <div class="mt-1 relative rounded-md shadow-sm">
                        <input id="username" type="text" value="@_username" class="@Css.InputText" placeholder="Please choose your username." disabled />
                    </div>
                </div>
                <div>
                    <label for="phone-number" class="@Css.InputLabel">Phone number</label>
                    <div class="mt-1 relative rounded-md shadow-sm">
                        <InputText id="phone-number" type="text" @bind-Value="Input.PhoneNumber" class="@Css.InputText" placeholder="Please enter your phone number." />
                    </div>
                    <ValidationMessage For="() => Input.PhoneNumber" class="@Css.ValidationMessage" />
                </div>
                <div>
                    <button id="update-profile-button" type="submit" class="@Css.PrimaryButton">Save</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private AppUser _user = default!;
    private string? _username;
    private string? _phoneNumber;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        _user = await UserAccessor.GetRequiredUserAsync();
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input.PhoneNumber ??= _phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != _phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Unexpected error when trying to set phone number.");
                return;
            }
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated");
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
