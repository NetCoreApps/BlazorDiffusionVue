@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorDiffusion.Data
@using BlazorDiffusion.Identity

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject UserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Delete Personal Data</PageTitle>

<h3 class="@Css.H3">Delete Personal Data</h3>

<div class="max-w-xl">
    <Alert Type="AlertType.Error" class="mb-3">
        Deleting this data permanently removes your account, and cannot be recovered.
    </Alert>

    <div class="mt-3 shadow overflow-hidden sm:rounded-md">
        <div class="px-4 bg-white dark:bg-black sm:p-6">
            <StatusMessage Message="@_message" />

            <EditForm class="mt-3" id="delete-user" Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="@Css.ValidationMessage" />

                <div class="flex flex-col gap-4">
                    @if (_requirePassword)
                    {
                        <div>
                            <label for="password" class="@Css.InputLabel">Password</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="password" type="password" @bind-Value="Input.Password" class="@Css.InputText" autocomplete="current-password" aria-required="true" placeholder="Please enter your password." />
                            </div>
                            <ValidationMessage For="() => Input.Password" class="@Css.ValidationMessage" />
                        </div>
                    }
                    <button class="@Css.DangerButton" type="submit">Delete data and close my account</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private string? _message;
    private AppUser _user = default!;
    private bool _requirePassword;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        _user = await UserAccessor.GetRequiredUserAsync();
        _requirePassword = await UserManager.HasPasswordAsync(_user);
    }

    private async Task OnValidSubmitAsync()
    {
        if (_requirePassword && !await UserManager.CheckPasswordAsync(_user, Input.Password!))
        {
            _message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(_user);
        var userId = await UserManager.GetUserIdAsync(_user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException($"Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        public string? Password { get; set; }
    }
}
