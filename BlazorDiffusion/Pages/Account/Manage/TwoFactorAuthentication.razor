@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using BlazorDiffusion.Data
@using BlazorDiffusion.Identity

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject UserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<h3 class="@Css.H3">Two-factor authentication (2FA)</h3>

<div class="max-w-xl">
    <StatusMessage />

    @if (_consentFeature?.CanTrack ?? true)
    {
        if (_is2faEnabled)
        {
            if (_recoveryCodesLeft == 0)
            {
                <Alert Type="AlertType.Error">
                    <strong>You have no recovery codes left.</strong>
                    <p>You must <a class="@Css.Link" href="/Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
                </Alert>
            }
            else if (_recoveryCodesLeft == 1)
            {
                <Alert Type="AlertType.Error">
                    <strong>You have 1 recovery code left.</strong>
                    <p>You can <a class="@Css.Link" href="/Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                </Alert>
            }
            else if (_recoveryCodesLeft <= 3)
            {
                <Alert Type="AlertType.Error">
                    <strong>You have @_recoveryCodesLeft recovery codes left.</strong>
                    <p>You should <a class="@Css.Link" href="/Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                </Alert>
            }

            if (_isMachineRemembered)
            {
                <form class="inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                    <button type="submit" class="@Css.PrimaryButton">Forget this browser</button>
                </form>
            }

            <a href="/Account/Manage/Disable2fa" class="@Css.PrimaryButton">Disable 2FA</a>
            <a href="/Account/Manage/GenerateRecoveryCodes" class="@Css.PrimaryButton">Reset recovery codes</a>
        }

        <div class="mt-4">
            <h4 class="@Css.H4">Authenticator app</h4>
            @if (!_hasAuthenticator)
            {
                <a id="enable-authenticator" href="/Account/Manage/EnableAuthenticator" class="@Css.PrimaryButton">Add authenticator app</a>
            }
            else
            {
                <a id="enable-authenticator" href="/Account/Manage/EnableAuthenticator" class="@Css.PrimaryButton">Set up authenticator app</a>
                <a id="reset-authenticator" href="/Account/Manage/ResetAuthenticator" class="@Css.PrimaryButton">Reset authenticator app</a>
            }
        </div>
    }
    else
    {
        <Alert Type="AlertType.Error">
            <strong>Privacy and cookie policy have not been accepted.</strong>
            <p>You must accept the policy before you can enable two factor authentication.</p>
        </Alert>
    }

</div>

@code {
    private AppUser? _user;
    private ITrackingConsentFeature? _consentFeature;
    private bool _hasAuthenticator;
    private int _recoveryCodesLeft;
    private bool _is2faEnabled;
    private bool _isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync();
        _consentFeature = HttpContext.Features.Get<ITrackingConsentFeature>();
        _hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(_user) is not null;
        _is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(_user);
        _isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(_user);
        _recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(_user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.");
    }
}
